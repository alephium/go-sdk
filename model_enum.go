/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the Enum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Enum{}

// Enum struct for Enum
type Enum struct {
	Name string `json:"name"`
	Fields []EnumField `json:"fields"`
}

// NewEnum instantiates a new Enum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnum(name string, fields []EnumField) *Enum {
	this := Enum{}
	this.Name = name
	this.Fields = fields
	return &this
}

// NewEnumWithDefaults instantiates a new Enum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumWithDefaults() *Enum {
	this := Enum{}
	return &this
}

// GetName returns the Name field value
func (o *Enum) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Enum) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Enum) SetName(v string) {
	o.Name = v
}

// GetFields returns the Fields field value
func (o *Enum) GetFields() []EnumField {
	if o == nil {
		var ret []EnumField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *Enum) GetFieldsOk() ([]EnumField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *Enum) SetFields(v []EnumField) {
	o.Fields = v
}

func (o Enum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Enum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

type NullableEnum struct {
	value *Enum
	isSet bool
}

func (v NullableEnum) Get() *Enum {
	return v.value
}

func (v *NullableEnum) Set(val *Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum(val *Enum) *NullableEnum {
	return &NullableEnum{value: val, isSet: true}
}

func (v NullableEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


