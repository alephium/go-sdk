/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
	"fmt"
)

// TxStatus - struct for TxStatus
type TxStatus struct {
	Confirmed *Confirmed
	MemPooled *MemPooled
	TxNotFound *TxNotFound
}

// ConfirmedAsTxStatus is a convenience function that returns Confirmed wrapped in TxStatus
func ConfirmedAsTxStatus(v *Confirmed) TxStatus {
	return TxStatus{
		Confirmed: v,
	}
}

// MemPooledAsTxStatus is a convenience function that returns MemPooled wrapped in TxStatus
func MemPooledAsTxStatus(v *MemPooled) TxStatus {
	return TxStatus{
		MemPooled: v,
	}
}

// TxNotFoundAsTxStatus is a convenience function that returns TxNotFound wrapped in TxStatus
func TxNotFoundAsTxStatus(v *TxNotFound) TxStatus {
	return TxStatus{
		TxNotFound: v,
	}
}


func unmarshalTxStatus(fields map[string]interface{}, data []byte) (*TxStatus, error) {
	tpe, ok := fields["type"]
	if !ok {
		return nil, fmt.Errorf("type field not exist")
	}
	tpeStr, ok := tpe.(string)
	if !ok {
		return nil, fmt.Errorf("expect string for `type`")
	}

	switch tpeStr {
	case "Confirmed":
		var confirmed Confirmed
		err := json.Unmarshal(data, &confirmed)
		if err == nil {
			return &TxStatus{Confirmed: &confirmed}, nil
		} else {
			return &TxStatus{Confirmed: nil}, err
		}
	case "MemPooled":
		return &TxStatus{MemPooled: &MemPooled{"MemPooled"}}, nil
	case "TxNotFound":
		return &TxStatus{TxNotFound: &TxNotFound{"TxNotFound"}}, nil
	default:
		return nil, fmt.Errorf("invalid type: %v", tpeStr)
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TxStatus) UnmarshalJSON(data []byte) error {
	var fields map[string]interface{}
	if err := json.Unmarshal(data, &fields); err != nil {
		return nil
	}
	tpe, ok := fields["type"]
	if !ok {
		return fmt.Errorf("type field not exist")
	}
	tpeStr, ok := tpe.(string)
	if !ok {
		return fmt.Errorf("expect string for `type`")
	}
	switch tpeStr {
	case "Confirmed":
		var confirmed Confirmed
		err := json.Unmarshal(data, &confirmed)
		if err == nil {
			dst.Confirmed = &confirmed
		}
		return err
	case "MemPooled":
		dst.MemPooled = &MemPooled{"MemPooled"}
		return nil
	case "TxNotFound":
		dst.TxNotFound = &TxNotFound{"TxNotFound"}
		return nil
	default:
		return fmt.Errorf("invalid type: %v", tpeStr)
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TxStatus) MarshalJSON() ([]byte, error) {
	if src.Confirmed != nil {
		return json.Marshal(&src.Confirmed)
	}

	if src.MemPooled != nil {
		return json.Marshal(&src.MemPooled)
	}

	if src.TxNotFound != nil {
		return json.Marshal(&src.TxNotFound)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TxStatus) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Confirmed != nil {
		return obj.Confirmed
	}

	if obj.MemPooled != nil {
		return obj.MemPooled
	}

	if obj.TxNotFound != nil {
		return obj.TxNotFound
	}

	// all schemas are nil
	return nil
}

type NullableTxStatus struct {
	value *TxStatus
	isSet bool
}

func (v NullableTxStatus) Get() *TxStatus {
	return v.value
}

func (v *NullableTxStatus) Set(val *TxStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTxStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTxStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxStatus(val *TxStatus) *NullableTxStatus {
	return &NullableTxStatus{value: val, isSet: true}
}

func (v NullableTxStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


