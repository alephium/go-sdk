/*
Alephium API

Testing WalletsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package alephium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/alephium/go-sdk"
)

func Test_alephium_WalletsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WalletsApiService DeleteWalletsWalletName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		httpRes, err := apiClient.WalletsApi.DeleteWalletsWalletName(context.Background(), walletName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService GetWallets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsApi.GetWallets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService GetWalletsWalletName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.GetWalletsWalletName(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService GetWalletsWalletNameAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.GetWalletsWalletNameAddresses(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService GetWalletsWalletNameAddressesAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string
		var address string

		resp, httpRes, err := apiClient.WalletsApi.GetWalletsWalletNameAddressesAddress(context.Background(), walletName, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService GetWalletsWalletNameBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.GetWalletsWalletNameBalances(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWallets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsApi.PostWallets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameChangeActiveAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameChangeActiveAddress(context.Background(), walletName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameDeriveNextAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameDeriveNextAddress(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameLock(context.Background(), walletName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameRevealMnemonic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameRevealMnemonic(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameSign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameSign(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameSweepActiveAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameSweepActiveAddress(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameSweepAllAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameSweepAllAddresses(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		resp, httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameTransfer(context.Background(), walletName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PostWalletsWalletNameUnlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletName string

		httpRes, err := apiClient.WalletsApi.PostWalletsWalletNameUnlock(context.Background(), walletName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsApiService PutWallets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsApi.PutWallets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
