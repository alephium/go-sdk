/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the MultipleCallContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleCallContract{}

// MultipleCallContract struct for MultipleCallContract
type MultipleCallContract struct {
	Calls []CallContract `json:"calls"`
}

// NewMultipleCallContract instantiates a new MultipleCallContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleCallContract(calls []CallContract) *MultipleCallContract {
	this := MultipleCallContract{}
	this.Calls = calls
	return &this
}

// NewMultipleCallContractWithDefaults instantiates a new MultipleCallContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleCallContractWithDefaults() *MultipleCallContract {
	this := MultipleCallContract{}
	return &this
}

// GetCalls returns the Calls field value
func (o *MultipleCallContract) GetCalls() []CallContract {
	if o == nil {
		var ret []CallContract
		return ret
	}

	return o.Calls
}

// GetCallsOk returns a tuple with the Calls field value
// and a boolean to check if the value has been set.
func (o *MultipleCallContract) GetCallsOk() ([]CallContract, bool) {
	if o == nil {
		return nil, false
	}
	return o.Calls, true
}

// SetCalls sets field value
func (o *MultipleCallContract) SetCalls(v []CallContract) {
	o.Calls = v
}

func (o MultipleCallContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleCallContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calls"] = o.Calls
	return toSerialize, nil
}

type NullableMultipleCallContract struct {
	value *MultipleCallContract
	isSet bool
}

func (v NullableMultipleCallContract) Get() *MultipleCallContract {
	return v.value
}

func (v *NullableMultipleCallContract) Set(val *MultipleCallContract) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleCallContract) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleCallContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleCallContract(val *MultipleCallContract) *NullableMultipleCallContract {
	return &NullableMultipleCallContract{value: val, isSet: true}
}

func (v NullableMultipleCallContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleCallContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


