/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// CompileScriptResult struct for CompileScriptResult
type CompileScriptResult struct {
	BytecodeTemplate string `json:"bytecodeTemplate"`
	Fields FieldsSig `json:"fields"`
	Functions []FunctionSig `json:"functions"`
}

// NewCompileScriptResult instantiates a new CompileScriptResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompileScriptResult(bytecodeTemplate string, fields FieldsSig, functions []FunctionSig) *CompileScriptResult {
	this := CompileScriptResult{}
	this.BytecodeTemplate = bytecodeTemplate
	this.Fields = fields
	this.Functions = functions
	return &this
}

// NewCompileScriptResultWithDefaults instantiates a new CompileScriptResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompileScriptResultWithDefaults() *CompileScriptResult {
	this := CompileScriptResult{}
	return &this
}

// GetBytecodeTemplate returns the BytecodeTemplate field value
func (o *CompileScriptResult) GetBytecodeTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BytecodeTemplate
}

// GetBytecodeTemplateOk returns a tuple with the BytecodeTemplate field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetBytecodeTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BytecodeTemplate, true
}

// SetBytecodeTemplate sets field value
func (o *CompileScriptResult) SetBytecodeTemplate(v string) {
	o.BytecodeTemplate = v
}

// GetFields returns the Fields field value
func (o *CompileScriptResult) GetFields() FieldsSig {
	if o == nil {
		var ret FieldsSig
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetFieldsOk() (*FieldsSig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *CompileScriptResult) SetFields(v FieldsSig) {
	o.Fields = v
}

// GetFunctions returns the Functions field value
func (o *CompileScriptResult) GetFunctions() []FunctionSig {
	if o == nil {
		var ret []FunctionSig
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetFunctionsOk() ([]FunctionSig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *CompileScriptResult) SetFunctions(v []FunctionSig) {
	o.Functions = v
}

func (o CompileScriptResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bytecodeTemplate"] = o.BytecodeTemplate
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if true {
		toSerialize["functions"] = o.Functions
	}
	return json.Marshal(toSerialize)
}

type NullableCompileScriptResult struct {
	value *CompileScriptResult
	isSet bool
}

func (v NullableCompileScriptResult) Get() *CompileScriptResult {
	return v.value
}

func (v *NullableCompileScriptResult) Set(val *CompileScriptResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompileScriptResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompileScriptResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompileScriptResult(val *CompileScriptResult) *NullableCompileScriptResult {
	return &NullableCompileScriptResult{value: val, isSet: true}
}

func (v NullableCompileScriptResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompileScriptResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


