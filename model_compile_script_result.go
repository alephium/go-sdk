/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the CompileScriptResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompileScriptResult{}

// CompileScriptResult struct for CompileScriptResult
type CompileScriptResult struct {
	Version string `json:"version"`
	Name string `json:"name"`
	BytecodeTemplate string `json:"bytecodeTemplate"`
	BytecodeDebugPatch string `json:"bytecodeDebugPatch"`
	Fields FieldsSig `json:"fields"`
	Functions []FunctionSig `json:"functions"`
	Warnings []string `json:"warnings"`
}

// NewCompileScriptResult instantiates a new CompileScriptResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompileScriptResult(version string, name string, bytecodeTemplate string, bytecodeDebugPatch string, fields FieldsSig, functions []FunctionSig, warnings []string) *CompileScriptResult {
	this := CompileScriptResult{}
	this.Version = version
	this.Name = name
	this.BytecodeTemplate = bytecodeTemplate
	this.BytecodeDebugPatch = bytecodeDebugPatch
	this.Fields = fields
	this.Functions = functions
	this.Warnings = warnings
	return &this
}

// NewCompileScriptResultWithDefaults instantiates a new CompileScriptResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompileScriptResultWithDefaults() *CompileScriptResult {
	this := CompileScriptResult{}
	return &this
}

// GetVersion returns the Version field value
func (o *CompileScriptResult) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CompileScriptResult) SetVersion(v string) {
	o.Version = v
}

// GetName returns the Name field value
func (o *CompileScriptResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompileScriptResult) SetName(v string) {
	o.Name = v
}

// GetBytecodeTemplate returns the BytecodeTemplate field value
func (o *CompileScriptResult) GetBytecodeTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BytecodeTemplate
}

// GetBytecodeTemplateOk returns a tuple with the BytecodeTemplate field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetBytecodeTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BytecodeTemplate, true
}

// SetBytecodeTemplate sets field value
func (o *CompileScriptResult) SetBytecodeTemplate(v string) {
	o.BytecodeTemplate = v
}

// GetBytecodeDebugPatch returns the BytecodeDebugPatch field value
func (o *CompileScriptResult) GetBytecodeDebugPatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BytecodeDebugPatch
}

// GetBytecodeDebugPatchOk returns a tuple with the BytecodeDebugPatch field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetBytecodeDebugPatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BytecodeDebugPatch, true
}

// SetBytecodeDebugPatch sets field value
func (o *CompileScriptResult) SetBytecodeDebugPatch(v string) {
	o.BytecodeDebugPatch = v
}

// GetFields returns the Fields field value
func (o *CompileScriptResult) GetFields() FieldsSig {
	if o == nil {
		var ret FieldsSig
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetFieldsOk() (*FieldsSig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *CompileScriptResult) SetFields(v FieldsSig) {
	o.Fields = v
}

// GetFunctions returns the Functions field value
func (o *CompileScriptResult) GetFunctions() []FunctionSig {
	if o == nil {
		var ret []FunctionSig
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetFunctionsOk() ([]FunctionSig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *CompileScriptResult) SetFunctions(v []FunctionSig) {
	o.Functions = v
}

// GetWarnings returns the Warnings field value
func (o *CompileScriptResult) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *CompileScriptResult) GetWarningsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *CompileScriptResult) SetWarnings(v []string) {
	o.Warnings = v
}

func (o CompileScriptResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompileScriptResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["name"] = o.Name
	toSerialize["bytecodeTemplate"] = o.BytecodeTemplate
	toSerialize["bytecodeDebugPatch"] = o.BytecodeDebugPatch
	toSerialize["fields"] = o.Fields
	toSerialize["functions"] = o.Functions
	toSerialize["warnings"] = o.Warnings
	return toSerialize, nil
}

type NullableCompileScriptResult struct {
	value *CompileScriptResult
	isSet bool
}

func (v NullableCompileScriptResult) Get() *CompileScriptResult {
	return v.value
}

func (v *NullableCompileScriptResult) Set(val *CompileScriptResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompileScriptResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompileScriptResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompileScriptResult(val *CompileScriptResult) *NullableCompileScriptResult {
	return &NullableCompileScriptResult{value: val, isSet: true}
}

func (v NullableCompileScriptResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompileScriptResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


