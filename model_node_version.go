/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the NodeVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeVersion{}

// NodeVersion struct for NodeVersion
type NodeVersion struct {
	Version ReleaseVersion `json:"version"`
}

// NewNodeVersion instantiates a new NodeVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeVersion(version ReleaseVersion) *NodeVersion {
	this := NodeVersion{}
	this.Version = version
	return &this
}

// NewNodeVersionWithDefaults instantiates a new NodeVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeVersionWithDefaults() *NodeVersion {
	this := NodeVersion{}
	return &this
}

// GetVersion returns the Version field value
func (o *NodeVersion) GetVersion() ReleaseVersion {
	if o == nil {
		var ret ReleaseVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *NodeVersion) GetVersionOk() (*ReleaseVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *NodeVersion) SetVersion(v ReleaseVersion) {
	o.Version = v
}

func (o NodeVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableNodeVersion struct {
	value *NodeVersion
	isSet bool
}

func (v NullableNodeVersion) Get() *NodeVersion {
	return v.value
}

func (v *NullableNodeVersion) Set(val *NodeVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeVersion(val *NodeVersion) *NullableNodeVersion {
	return &NullableNodeVersion{value: val, isSet: true}
}

func (v NullableNodeVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


