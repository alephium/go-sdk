/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the ContractEventByBlockHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractEventByBlockHash{}

// ContractEventByBlockHash struct for ContractEventByBlockHash
type ContractEventByBlockHash struct {
	TxId string `json:"txId"`
	ContractAddress string `json:"contractAddress"`
	EventIndex int32 `json:"eventIndex"`
	Fields []Val `json:"fields"`
}

// NewContractEventByBlockHash instantiates a new ContractEventByBlockHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractEventByBlockHash(txId string, contractAddress string, eventIndex int32, fields []Val) *ContractEventByBlockHash {
	this := ContractEventByBlockHash{}
	this.TxId = txId
	this.ContractAddress = contractAddress
	this.EventIndex = eventIndex
	this.Fields = fields
	return &this
}

// NewContractEventByBlockHashWithDefaults instantiates a new ContractEventByBlockHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractEventByBlockHashWithDefaults() *ContractEventByBlockHash {
	this := ContractEventByBlockHash{}
	return &this
}

// GetTxId returns the TxId field value
func (o *ContractEventByBlockHash) GetTxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *ContractEventByBlockHash) GetTxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *ContractEventByBlockHash) SetTxId(v string) {
	o.TxId = v
}

// GetContractAddress returns the ContractAddress field value
func (o *ContractEventByBlockHash) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *ContractEventByBlockHash) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *ContractEventByBlockHash) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetEventIndex returns the EventIndex field value
func (o *ContractEventByBlockHash) GetEventIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventIndex
}

// GetEventIndexOk returns a tuple with the EventIndex field value
// and a boolean to check if the value has been set.
func (o *ContractEventByBlockHash) GetEventIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventIndex, true
}

// SetEventIndex sets field value
func (o *ContractEventByBlockHash) SetEventIndex(v int32) {
	o.EventIndex = v
}

// GetFields returns the Fields field value
func (o *ContractEventByBlockHash) GetFields() []Val {
	if o == nil {
		var ret []Val
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ContractEventByBlockHash) GetFieldsOk() ([]Val, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ContractEventByBlockHash) SetFields(v []Val) {
	o.Fields = v
}

func (o ContractEventByBlockHash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractEventByBlockHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["txId"] = o.TxId
	toSerialize["contractAddress"] = o.ContractAddress
	toSerialize["eventIndex"] = o.EventIndex
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

type NullableContractEventByBlockHash struct {
	value *ContractEventByBlockHash
	isSet bool
}

func (v NullableContractEventByBlockHash) Get() *ContractEventByBlockHash {
	return v.value
}

func (v *NullableContractEventByBlockHash) Set(val *ContractEventByBlockHash) {
	v.value = val
	v.isSet = true
}

func (v NullableContractEventByBlockHash) IsSet() bool {
	return v.isSet
}

func (v *NullableContractEventByBlockHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractEventByBlockHash(val *ContractEventByBlockHash) *NullableContractEventByBlockHash {
	return &NullableContractEventByBlockHash{value: val, isSet: true}
}

func (v NullableContractEventByBlockHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractEventByBlockHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


