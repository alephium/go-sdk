/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// EventSig struct for EventSig
type EventSig struct {
	Name string `json:"name"`
	Signature string `json:"signature"`
	FieldNames []string `json:"fieldNames"`
	FieldTypes []string `json:"fieldTypes"`
}

// NewEventSig instantiates a new EventSig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSig(name string, signature string, fieldNames []string, fieldTypes []string) *EventSig {
	this := EventSig{}
	this.Name = name
	this.Signature = signature
	this.FieldNames = fieldNames
	this.FieldTypes = fieldTypes
	return &this
}

// NewEventSigWithDefaults instantiates a new EventSig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSigWithDefaults() *EventSig {
	this := EventSig{}
	return &this
}

// GetName returns the Name field value
func (o *EventSig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventSig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventSig) SetName(v string) {
	o.Name = v
}

// GetSignature returns the Signature field value
func (o *EventSig) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *EventSig) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *EventSig) SetSignature(v string) {
	o.Signature = v
}

// GetFieldNames returns the FieldNames field value
func (o *EventSig) GetFieldNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldNames
}

// GetFieldNamesOk returns a tuple with the FieldNames field value
// and a boolean to check if the value has been set.
func (o *EventSig) GetFieldNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldNames, true
}

// SetFieldNames sets field value
func (o *EventSig) SetFieldNames(v []string) {
	o.FieldNames = v
}

// GetFieldTypes returns the FieldTypes field value
func (o *EventSig) GetFieldTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldTypes
}

// GetFieldTypesOk returns a tuple with the FieldTypes field value
// and a boolean to check if the value has been set.
func (o *EventSig) GetFieldTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldTypes, true
}

// SetFieldTypes sets field value
func (o *EventSig) SetFieldTypes(v []string) {
	o.FieldTypes = v
}

func (o EventSig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["signature"] = o.Signature
	}
	if true {
		toSerialize["fieldNames"] = o.FieldNames
	}
	if true {
		toSerialize["fieldTypes"] = o.FieldTypes
	}
	return json.Marshal(toSerialize)
}

type NullableEventSig struct {
	value *EventSig
	isSet bool
}

func (v NullableEventSig) Get() *EventSig {
	return v.value
}

func (v *NullableEventSig) Set(val *EventSig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSig(val *EventSig) *NullableEventSig {
	return &NullableEventSig{value: val, isSet: true}
}

func (v NullableEventSig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


