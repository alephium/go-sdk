/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// OutputRef struct for OutputRef
type OutputRef struct {
	Hint int32 `json:"hint"`
	Key string `json:"key"`
}

// NewOutputRef instantiates a new OutputRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputRef(hint int32, key string) *OutputRef {
	this := OutputRef{}
	this.Hint = hint
	this.Key = key
	return &this
}

// NewOutputRefWithDefaults instantiates a new OutputRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputRefWithDefaults() *OutputRef {
	this := OutputRef{}
	return &this
}

// GetHint returns the Hint field value
func (o *OutputRef) GetHint() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hint
}

// GetHintOk returns a tuple with the Hint field value
// and a boolean to check if the value has been set.
func (o *OutputRef) GetHintOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hint, true
}

// SetHint sets field value
func (o *OutputRef) SetHint(v int32) {
	o.Hint = v
}

// GetKey returns the Key field value
func (o *OutputRef) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *OutputRef) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *OutputRef) SetKey(v string) {
	o.Key = v
}

func (o OutputRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hint"] = o.Hint
	}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableOutputRef struct {
	value *OutputRef
	isSet bool
}

func (v NullableOutputRef) Get() *OutputRef {
	return v.value
}

func (v *NullableOutputRef) Set(val *OutputRef) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputRef) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputRef(val *OutputRef) *NullableOutputRef {
	return &NullableOutputRef{value: val, isSet: true}
}

func (v NullableOutputRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


