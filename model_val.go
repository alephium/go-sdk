/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
	"fmt"
)

// Val - struct for Val
type Val struct {
	ValAddress *ValAddress
	ValArray *ValArray
	ValBool *ValBool
	ValByteVec *ValByteVec
	ValI256 *ValI256
	ValU256 *ValU256
}

// ValAddressAsVal is a convenience function that returns ValAddress wrapped in Val
func ValAddressAsVal(v *ValAddress) Val {
	return Val{
		ValAddress: v,
	}
}

// ValArrayAsVal is a convenience function that returns ValArray wrapped in Val
func ValArrayAsVal(v *ValArray) Val {
	return Val{
		ValArray: v,
	}
}

// ValBoolAsVal is a convenience function that returns ValBool wrapped in Val
func ValBoolAsVal(v *ValBool) Val {
	return Val{
		ValBool: v,
	}
}

// ValByteVecAsVal is a convenience function that returns ValByteVec wrapped in Val
func ValByteVecAsVal(v *ValByteVec) Val {
	return Val{
		ValByteVec: v,
	}
}

// ValI256AsVal is a convenience function that returns ValI256 wrapped in Val
func ValI256AsVal(v *ValI256) Val {
	return Val{
		ValI256: v,
	}
}

// ValU256AsVal is a convenience function that returns ValU256 wrapped in Val
func ValU256AsVal(v *ValU256) Val {
	return Val{
		ValU256: v,
	}
}

func unmarshalVal(fields map[string]interface{}) (*Val, error) {
	tpe, ok := fields["type"]
	if !ok {
		return nil, fmt.Errorf("type field not exist")
	}
	value, ok := fields["value"]
	if !ok {
		return nil, fmt.Errorf("value field not exist")
	}

	tpeStr, ok := tpe.(string)
	if !ok {
		return nil, fmt.Errorf("expect string for `type`")
	}

	switch tpeStr {
	case "Bool":
		return toValBool(value)
	case "I256":
		return toValI256(value)
	case "U256":
		return toValU256(value)
	case "ByteVec":
		return toValByteVec(value)
	case "Address":
		return toValAddress(value)
	case "Array":
		return toValArray(value)
	default:
		return nil, fmt.Errorf("invalid type: %v", tpeStr)
	}
}

func toValBool(value interface{}) (*Val, error) {
	if v, ok := value.(bool); ok {
		return &Val{
			ValBool: &ValBool{
				Type:  "Bool",
				Value: v,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid bool type")
}

func toValI256(value interface{}) (*Val, error) {
	if v, ok := value.(string); ok {
		return &Val{
			ValI256: &ValI256{
				Type:  "I256",
				Value: v,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid i256 type")
}

func toValU256(value interface{}) (*Val, error) {
	if v, ok := value.(string); ok {
		return &Val{
			ValU256: &ValU256{
				Type:  "U256",
				Value: v,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid u256 type")
}

func toValByteVec(value interface{}) (*Val, error) {
	if v, ok := value.(string); ok {
		return &Val{
			ValByteVec: &ValByteVec{
				Type:  "ByteVec",
				Value: v,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid bytevec type")
}

func toValAddress(value interface{}) (*Val, error) {
	if v, ok := value.(string); ok {
		return &Val{
			ValAddress: &ValAddress{
				Type:  "Address",
				Value: v,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid address type")
}

func toValArray(value interface{}) (*Val, error) {
	if v, ok := value.([]interface{}); ok {
		elements := make([]Val, len(v))
		for i, e := range v {
			fields, ok := e.(map[string]interface{})
			if !ok {
				return nil, fmt.Errorf("invalid array value")
			}
			value, err := unmarshalVal(fields)
			if err != nil {
				return nil, err
			}
			elements[i] = *value
		}
		return &Val{
			ValArray: &ValArray{
				Type:  "Array",
				Value: elements,
			},
		}, nil
	}
	return nil, fmt.Errorf("invalid array type")
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Val) UnmarshalJSON(data []byte) error {
	var fields map[string]interface{}
	if err := json.Unmarshal(data, &fields); err != nil {
		return nil
	}
	result, err := unmarshalVal(fields)
	if err != nil {
		return err
	}
	*dst = *result
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Val) MarshalJSON() ([]byte, error) {
	if src.ValAddress != nil {
		return json.Marshal(&src.ValAddress)
	}

	if src.ValArray != nil {
		return json.Marshal(&src.ValArray)
	}

	if src.ValBool != nil {
		return json.Marshal(&src.ValBool)
	}

	if src.ValByteVec != nil {
		return json.Marshal(&src.ValByteVec)
	}

	if src.ValI256 != nil {
		return json.Marshal(&src.ValI256)
	}

	if src.ValU256 != nil {
		return json.Marshal(&src.ValU256)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Val) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ValAddress != nil {
		return obj.ValAddress
	}

	if obj.ValArray != nil {
		return obj.ValArray
	}

	if obj.ValBool != nil {
		return obj.ValBool
	}

	if obj.ValByteVec != nil {
		return obj.ValByteVec
	}

	if obj.ValI256 != nil {
		return obj.ValI256
	}

	if obj.ValU256 != nil {
		return obj.ValU256
	}

	// all schemas are nil
	return nil
}

type NullableVal struct {
	value *Val
	isSet bool
}

func (v NullableVal) Get() *Val {
	return v.value
}

func (v *NullableVal) Set(val *Val) {
	v.value = val
	v.isSet = true
}

func (v NullableVal) IsSet() bool {
	return v.isSet
}

func (v *NullableVal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVal(val *Val) *NullableVal {
	return &NullableVal{value: val, isSet: true}
}

func (v NullableVal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


