/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
	"fmt"
)

// MisbehaviorAction - struct for MisbehaviorAction
type MisbehaviorAction struct {
	Ban *Ban
	Unban *Unban
}

// BanAsMisbehaviorAction is a convenience function that returns Ban wrapped in MisbehaviorAction
func BanAsMisbehaviorAction(v *Ban) MisbehaviorAction {
	return MisbehaviorAction{
		Ban: v,
	}
}

// UnbanAsMisbehaviorAction is a convenience function that returns Unban wrapped in MisbehaviorAction
func UnbanAsMisbehaviorAction(v *Unban) MisbehaviorAction {
	return MisbehaviorAction{
		Unban: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MisbehaviorAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Ban
	err = newStrictDecoder(data).Decode(&dst.Ban)
	if err == nil {
		jsonBan, _ := json.Marshal(dst.Ban)
		if string(jsonBan) == "{}" { // empty struct
			dst.Ban = nil
		} else {
			match++
		}
	} else {
		dst.Ban = nil
	}

	// try to unmarshal data into Unban
	err = newStrictDecoder(data).Decode(&dst.Unban)
	if err == nil {
		jsonUnban, _ := json.Marshal(dst.Unban)
		if string(jsonUnban) == "{}" { // empty struct
			dst.Unban = nil
		} else {
			match++
		}
	} else {
		dst.Unban = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Ban = nil
		dst.Unban = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MisbehaviorAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MisbehaviorAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MisbehaviorAction) MarshalJSON() ([]byte, error) {
	if src.Ban != nil {
		return json.Marshal(&src.Ban)
	}

	if src.Unban != nil {
		return json.Marshal(&src.Unban)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MisbehaviorAction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Ban != nil {
		return obj.Ban
	}

	if obj.Unban != nil {
		return obj.Unban
	}

	// all schemas are nil
	return nil
}

type NullableMisbehaviorAction struct {
	value *MisbehaviorAction
	isSet bool
}

func (v NullableMisbehaviorAction) Get() *MisbehaviorAction {
	return v.value
}

func (v *NullableMisbehaviorAction) Set(val *MisbehaviorAction) {
	v.value = val
	v.isSet = true
}

func (v NullableMisbehaviorAction) IsSet() bool {
	return v.isSet
}

func (v *NullableMisbehaviorAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMisbehaviorAction(val *MisbehaviorAction) *NullableMisbehaviorAction {
	return &NullableMisbehaviorAction{value: val, isSet: true}
}

func (v NullableMisbehaviorAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMisbehaviorAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


