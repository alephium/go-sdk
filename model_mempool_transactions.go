/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the MempoolTransactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MempoolTransactions{}

// MempoolTransactions struct for MempoolTransactions
type MempoolTransactions struct {
	FromGroup int32 `json:"fromGroup"`
	ToGroup int32 `json:"toGroup"`
	Transactions []TransactionTemplate `json:"transactions"`
}

// NewMempoolTransactions instantiates a new MempoolTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMempoolTransactions(fromGroup int32, toGroup int32, transactions []TransactionTemplate) *MempoolTransactions {
	this := MempoolTransactions{}
	this.FromGroup = fromGroup
	this.ToGroup = toGroup
	this.Transactions = transactions
	return &this
}

// NewMempoolTransactionsWithDefaults instantiates a new MempoolTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMempoolTransactionsWithDefaults() *MempoolTransactions {
	this := MempoolTransactions{}
	return &this
}

// GetFromGroup returns the FromGroup field value
func (o *MempoolTransactions) GetFromGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FromGroup
}

// GetFromGroupOk returns a tuple with the FromGroup field value
// and a boolean to check if the value has been set.
func (o *MempoolTransactions) GetFromGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromGroup, true
}

// SetFromGroup sets field value
func (o *MempoolTransactions) SetFromGroup(v int32) {
	o.FromGroup = v
}

// GetToGroup returns the ToGroup field value
func (o *MempoolTransactions) GetToGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ToGroup
}

// GetToGroupOk returns a tuple with the ToGroup field value
// and a boolean to check if the value has been set.
func (o *MempoolTransactions) GetToGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToGroup, true
}

// SetToGroup sets field value
func (o *MempoolTransactions) SetToGroup(v int32) {
	o.ToGroup = v
}

// GetTransactions returns the Transactions field value
func (o *MempoolTransactions) GetTransactions() []TransactionTemplate {
	if o == nil {
		var ret []TransactionTemplate
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *MempoolTransactions) GetTransactionsOk() ([]TransactionTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *MempoolTransactions) SetTransactions(v []TransactionTemplate) {
	o.Transactions = v
}

func (o MempoolTransactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MempoolTransactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromGroup"] = o.FromGroup
	toSerialize["toGroup"] = o.ToGroup
	toSerialize["transactions"] = o.Transactions
	return toSerialize, nil
}

type NullableMempoolTransactions struct {
	value *MempoolTransactions
	isSet bool
}

func (v NullableMempoolTransactions) Get() *MempoolTransactions {
	return v.value
}

func (v *NullableMempoolTransactions) Set(val *MempoolTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableMempoolTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableMempoolTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMempoolTransactions(val *MempoolTransactions) *NullableMempoolTransactions {
	return &NullableMempoolTransactions{value: val, isSet: true}
}

func (v NullableMempoolTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMempoolTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


