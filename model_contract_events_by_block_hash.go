/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the ContractEventsByBlockHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractEventsByBlockHash{}

// ContractEventsByBlockHash struct for ContractEventsByBlockHash
type ContractEventsByBlockHash struct {
	Events []ContractEventByBlockHash `json:"events"`
}

// NewContractEventsByBlockHash instantiates a new ContractEventsByBlockHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractEventsByBlockHash(events []ContractEventByBlockHash) *ContractEventsByBlockHash {
	this := ContractEventsByBlockHash{}
	this.Events = events
	return &this
}

// NewContractEventsByBlockHashWithDefaults instantiates a new ContractEventsByBlockHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractEventsByBlockHashWithDefaults() *ContractEventsByBlockHash {
	this := ContractEventsByBlockHash{}
	return &this
}

// GetEvents returns the Events field value
func (o *ContractEventsByBlockHash) GetEvents() []ContractEventByBlockHash {
	if o == nil {
		var ret []ContractEventByBlockHash
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *ContractEventsByBlockHash) GetEventsOk() ([]ContractEventByBlockHash, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *ContractEventsByBlockHash) SetEvents(v []ContractEventByBlockHash) {
	o.Events = v
}

func (o ContractEventsByBlockHash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractEventsByBlockHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

type NullableContractEventsByBlockHash struct {
	value *ContractEventsByBlockHash
	isSet bool
}

func (v NullableContractEventsByBlockHash) Get() *ContractEventsByBlockHash {
	return v.value
}

func (v *NullableContractEventsByBlockHash) Set(val *ContractEventsByBlockHash) {
	v.value = val
	v.isSet = true
}

func (v NullableContractEventsByBlockHash) IsSet() bool {
	return v.isSet
}

func (v *NullableContractEventsByBlockHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractEventsByBlockHash(val *ContractEventsByBlockHash) *NullableContractEventsByBlockHash {
	return &NullableContractEventsByBlockHash{value: val, isSet: true}
}

func (v NullableContractEventsByBlockHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractEventsByBlockHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


