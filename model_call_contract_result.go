/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
	"fmt"
)

// CallContractResult - struct for CallContractResult
type CallContractResult struct {
	CallContractFailed *CallContractFailed
	CallContractSucceeded *CallContractSucceeded
}

// CallContractFailedAsCallContractResult is a convenience function that returns CallContractFailed wrapped in CallContractResult
func CallContractFailedAsCallContractResult(v *CallContractFailed) CallContractResult {
	return CallContractResult{
		CallContractFailed: v,
	}
}

// CallContractSucceededAsCallContractResult is a convenience function that returns CallContractSucceeded wrapped in CallContractResult
func CallContractSucceededAsCallContractResult(v *CallContractSucceeded) CallContractResult {
	return CallContractResult{
		CallContractSucceeded: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CallContractResult) UnmarshalJSON(data []byte) error {
	var fields map[string]interface{}
	if err := json.Unmarshal(data, &fields); err != nil {
		return nil
	}
	tpe, ok := fields["type"]
	if !ok {
		return fmt.Errorf("type field not exist")
	}
	tpeStr, ok := tpe.(string)
	if !ok {
		return fmt.Errorf("expect string for `type`")
	}
	switch tpeStr {
	case "CallContractSucceeded":
		var result CallContractSucceeded
		err := json.Unmarshal(data, &result)
		if err == nil {
			dst.CallContractSucceeded = &result
		}
		return err
	case "CallContractFailed":
		var result CallContractFailed
		err := json.Unmarshal(data, &result)
		dst.CallContractFailed = &result
		return err
	default:
		return fmt.Errorf("invalid type: %v", tpeStr)
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallContractResult) MarshalJSON() ([]byte, error) {
	if src.CallContractFailed != nil {
		return json.Marshal(&src.CallContractFailed)
	}

	if src.CallContractSucceeded != nil {
		return json.Marshal(&src.CallContractSucceeded)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CallContractResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CallContractFailed != nil {
		return obj.CallContractFailed
	}

	if obj.CallContractSucceeded != nil {
		return obj.CallContractSucceeded
	}

	// all schemas are nil
	return nil
}

type NullableCallContractResult struct {
	value *CallContractResult
	isSet bool
}

func (v NullableCallContractResult) Get() *CallContractResult {
	return v.value
}

func (v *NullableCallContractResult) Set(val *CallContractResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCallContractResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCallContractResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallContractResult(val *CallContractResult) *NullableCallContractResult {
	return &NullableCallContractResult{value: val, isSet: true}
}

func (v NullableCallContractResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallContractResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


