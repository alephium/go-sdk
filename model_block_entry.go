/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// BlockEntry struct for BlockEntry
type BlockEntry struct {
	Hash string `json:"hash"`
	Timestamp int64 `json:"timestamp"`
	ChainFrom int32 `json:"chainFrom"`
	ChainTo int32 `json:"chainTo"`
	Height int32 `json:"height"`
	Deps []string `json:"deps"`
	Transactions []Transaction `json:"transactions"`
	Nonce string `json:"nonce"`
	Version int32 `json:"version"`
	DepStateHash string `json:"depStateHash"`
	TxsHash string `json:"txsHash"`
	Target string `json:"target"`
}

// NewBlockEntry instantiates a new BlockEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockEntry(hash string, timestamp int64, chainFrom int32, chainTo int32, height int32, deps []string, transactions []Transaction, nonce string, version int32, depStateHash string, txsHash string, target string) *BlockEntry {
	this := BlockEntry{}
	this.Hash = hash
	this.Timestamp = timestamp
	this.ChainFrom = chainFrom
	this.ChainTo = chainTo
	this.Height = height
	this.Deps = deps
	this.Transactions = transactions
	this.Nonce = nonce
	this.Version = version
	this.DepStateHash = depStateHash
	this.TxsHash = txsHash
	this.Target = target
	return &this
}

// NewBlockEntryWithDefaults instantiates a new BlockEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockEntryWithDefaults() *BlockEntry {
	this := BlockEntry{}
	return &this
}

// GetHash returns the Hash field value
func (o *BlockEntry) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *BlockEntry) SetHash(v string) {
	o.Hash = v
}

// GetTimestamp returns the Timestamp field value
func (o *BlockEntry) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BlockEntry) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetChainFrom returns the ChainFrom field value
func (o *BlockEntry) GetChainFrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChainFrom
}

// GetChainFromOk returns a tuple with the ChainFrom field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetChainFromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainFrom, true
}

// SetChainFrom sets field value
func (o *BlockEntry) SetChainFrom(v int32) {
	o.ChainFrom = v
}

// GetChainTo returns the ChainTo field value
func (o *BlockEntry) GetChainTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChainTo
}

// GetChainToOk returns a tuple with the ChainTo field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetChainToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainTo, true
}

// SetChainTo sets field value
func (o *BlockEntry) SetChainTo(v int32) {
	o.ChainTo = v
}

// GetHeight returns the Height field value
func (o *BlockEntry) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *BlockEntry) SetHeight(v int32) {
	o.Height = v
}

// GetDeps returns the Deps field value
func (o *BlockEntry) GetDeps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Deps
}

// GetDepsOk returns a tuple with the Deps field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetDepsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deps, true
}

// SetDeps sets field value
func (o *BlockEntry) SetDeps(v []string) {
	o.Deps = v
}

// GetTransactions returns the Transactions field value
func (o *BlockEntry) GetTransactions() []Transaction {
	if o == nil {
		var ret []Transaction
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetTransactionsOk() ([]Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *BlockEntry) SetTransactions(v []Transaction) {
	o.Transactions = v
}

// GetNonce returns the Nonce field value
func (o *BlockEntry) GetNonce() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *BlockEntry) SetNonce(v string) {
	o.Nonce = v
}

// GetVersion returns the Version field value
func (o *BlockEntry) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BlockEntry) SetVersion(v int32) {
	o.Version = v
}

// GetDepStateHash returns the DepStateHash field value
func (o *BlockEntry) GetDepStateHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepStateHash
}

// GetDepStateHashOk returns a tuple with the DepStateHash field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetDepStateHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepStateHash, true
}

// SetDepStateHash sets field value
func (o *BlockEntry) SetDepStateHash(v string) {
	o.DepStateHash = v
}

// GetTxsHash returns the TxsHash field value
func (o *BlockEntry) GetTxsHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxsHash
}

// GetTxsHashOk returns a tuple with the TxsHash field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetTxsHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxsHash, true
}

// SetTxsHash sets field value
func (o *BlockEntry) SetTxsHash(v string) {
	o.TxsHash = v
}

// GetTarget returns the Target field value
func (o *BlockEntry) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *BlockEntry) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *BlockEntry) SetTarget(v string) {
	o.Target = v
}

func (o BlockEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["chainFrom"] = o.ChainFrom
	}
	if true {
		toSerialize["chainTo"] = o.ChainTo
	}
	if true {
		toSerialize["height"] = o.Height
	}
	if true {
		toSerialize["deps"] = o.Deps
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}
	if true {
		toSerialize["nonce"] = o.Nonce
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["depStateHash"] = o.DepStateHash
	}
	if true {
		toSerialize["txsHash"] = o.TxsHash
	}
	if true {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableBlockEntry struct {
	value *BlockEntry
	isSet bool
}

func (v NullableBlockEntry) Get() *BlockEntry {
	return v.value
}

func (v *NullableBlockEntry) Set(val *BlockEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockEntry(val *BlockEntry) *NullableBlockEntry {
	return &NullableBlockEntry{value: val, isSet: true}
}

func (v NullableBlockEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


