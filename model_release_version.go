/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// ReleaseVersion struct for ReleaseVersion
type ReleaseVersion struct {
	Major int32 `json:"major"`
	Minor int32 `json:"minor"`
	Patch int32 `json:"patch"`
}

// NewReleaseVersion instantiates a new ReleaseVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseVersion(major int32, minor int32, patch int32) *ReleaseVersion {
	this := ReleaseVersion{}
	this.Major = major
	this.Minor = minor
	this.Patch = patch
	return &this
}

// NewReleaseVersionWithDefaults instantiates a new ReleaseVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseVersionWithDefaults() *ReleaseVersion {
	this := ReleaseVersion{}
	return &this
}

// GetMajor returns the Major field value
func (o *ReleaseVersion) GetMajor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Major
}

// GetMajorOk returns a tuple with the Major field value
// and a boolean to check if the value has been set.
func (o *ReleaseVersion) GetMajorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Major, true
}

// SetMajor sets field value
func (o *ReleaseVersion) SetMajor(v int32) {
	o.Major = v
}

// GetMinor returns the Minor field value
func (o *ReleaseVersion) GetMinor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Minor
}

// GetMinorOk returns a tuple with the Minor field value
// and a boolean to check if the value has been set.
func (o *ReleaseVersion) GetMinorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minor, true
}

// SetMinor sets field value
func (o *ReleaseVersion) SetMinor(v int32) {
	o.Minor = v
}

// GetPatch returns the Patch field value
func (o *ReleaseVersion) GetPatch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Patch
}

// GetPatchOk returns a tuple with the Patch field value
// and a boolean to check if the value has been set.
func (o *ReleaseVersion) GetPatchOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patch, true
}

// SetPatch sets field value
func (o *ReleaseVersion) SetPatch(v int32) {
	o.Patch = v
}

func (o ReleaseVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["major"] = o.Major
	}
	if true {
		toSerialize["minor"] = o.Minor
	}
	if true {
		toSerialize["patch"] = o.Patch
	}
	return json.Marshal(toSerialize)
}

type NullableReleaseVersion struct {
	value *ReleaseVersion
	isSet bool
}

func (v NullableReleaseVersion) Get() *ReleaseVersion {
	return v.value
}

func (v *NullableReleaseVersion) Set(val *ReleaseVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseVersion(val *ReleaseVersion) *NullableReleaseVersion {
	return &NullableReleaseVersion{value: val, isSet: true}
}

func (v NullableReleaseVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


