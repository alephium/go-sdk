/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// FunctionSig struct for FunctionSig
type FunctionSig struct {
	Name string `json:"name"`
	Signature string `json:"signature"`
	ArgNames []string `json:"argNames"`
	ArgTypes []string `json:"argTypes"`
	ReturnTypes []string `json:"returnTypes"`
}

// NewFunctionSig instantiates a new FunctionSig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionSig(name string, signature string, argNames []string, argTypes []string, returnTypes []string) *FunctionSig {
	this := FunctionSig{}
	this.Name = name
	this.Signature = signature
	this.ArgNames = argNames
	this.ArgTypes = argTypes
	this.ReturnTypes = returnTypes
	return &this
}

// NewFunctionSigWithDefaults instantiates a new FunctionSig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionSigWithDefaults() *FunctionSig {
	this := FunctionSig{}
	return &this
}

// GetName returns the Name field value
func (o *FunctionSig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FunctionSig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FunctionSig) SetName(v string) {
	o.Name = v
}

// GetSignature returns the Signature field value
func (o *FunctionSig) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *FunctionSig) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *FunctionSig) SetSignature(v string) {
	o.Signature = v
}

// GetArgNames returns the ArgNames field value
func (o *FunctionSig) GetArgNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ArgNames
}

// GetArgNamesOk returns a tuple with the ArgNames field value
// and a boolean to check if the value has been set.
func (o *FunctionSig) GetArgNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArgNames, true
}

// SetArgNames sets field value
func (o *FunctionSig) SetArgNames(v []string) {
	o.ArgNames = v
}

// GetArgTypes returns the ArgTypes field value
func (o *FunctionSig) GetArgTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ArgTypes
}

// GetArgTypesOk returns a tuple with the ArgTypes field value
// and a boolean to check if the value has been set.
func (o *FunctionSig) GetArgTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArgTypes, true
}

// SetArgTypes sets field value
func (o *FunctionSig) SetArgTypes(v []string) {
	o.ArgTypes = v
}

// GetReturnTypes returns the ReturnTypes field value
func (o *FunctionSig) GetReturnTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReturnTypes
}

// GetReturnTypesOk returns a tuple with the ReturnTypes field value
// and a boolean to check if the value has been set.
func (o *FunctionSig) GetReturnTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnTypes, true
}

// SetReturnTypes sets field value
func (o *FunctionSig) SetReturnTypes(v []string) {
	o.ReturnTypes = v
}

func (o FunctionSig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["signature"] = o.Signature
	}
	if true {
		toSerialize["argNames"] = o.ArgNames
	}
	if true {
		toSerialize["argTypes"] = o.ArgTypes
	}
	if true {
		toSerialize["returnTypes"] = o.ReturnTypes
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionSig struct {
	value *FunctionSig
	isSet bool
}

func (v NullableFunctionSig) Get() *FunctionSig {
	return v.value
}

func (v *NullableFunctionSig) Set(val *FunctionSig) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSig) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSig(val *FunctionSig) *NullableFunctionSig {
	return &NullableFunctionSig{value: val, isSet: true}
}

func (v NullableFunctionSig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


