/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// CompilerOptions struct for CompilerOptions
type CompilerOptions struct {
	IgnoreUnusedConstantsWarnings *bool `json:"ignoreUnusedConstantsWarnings,omitempty"`
	IgnoreUnusedVariablesWarnings *bool `json:"ignoreUnusedVariablesWarnings,omitempty"`
	IgnoreUnusedFieldsWarnings *bool `json:"ignoreUnusedFieldsWarnings,omitempty"`
	IgnoreUnusedPrivateFunctionsWarnings *bool `json:"ignoreUnusedPrivateFunctionsWarnings,omitempty"`
	IgnoreReadonlyCheckWarnings *bool `json:"ignoreReadonlyCheckWarnings,omitempty"`
	IgnoreExternalCallCheckWarnings *bool `json:"ignoreExternalCallCheckWarnings,omitempty"`
}

// NewCompilerOptions instantiates a new CompilerOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompilerOptions() *CompilerOptions {
	this := CompilerOptions{}
	return &this
}

// NewCompilerOptionsWithDefaults instantiates a new CompilerOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompilerOptionsWithDefaults() *CompilerOptions {
	this := CompilerOptions{}
	return &this
}

// GetIgnoreUnusedConstantsWarnings returns the IgnoreUnusedConstantsWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreUnusedConstantsWarnings() bool {
	if o == nil || o.IgnoreUnusedConstantsWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUnusedConstantsWarnings
}

// GetIgnoreUnusedConstantsWarningsOk returns a tuple with the IgnoreUnusedConstantsWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreUnusedConstantsWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreUnusedConstantsWarnings == nil {
		return nil, false
	}
	return o.IgnoreUnusedConstantsWarnings, true
}

// HasIgnoreUnusedConstantsWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreUnusedConstantsWarnings() bool {
	if o != nil && o.IgnoreUnusedConstantsWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreUnusedConstantsWarnings gets a reference to the given bool and assigns it to the IgnoreUnusedConstantsWarnings field.
func (o *CompilerOptions) SetIgnoreUnusedConstantsWarnings(v bool) {
	o.IgnoreUnusedConstantsWarnings = &v
}

// GetIgnoreUnusedVariablesWarnings returns the IgnoreUnusedVariablesWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreUnusedVariablesWarnings() bool {
	if o == nil || o.IgnoreUnusedVariablesWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUnusedVariablesWarnings
}

// GetIgnoreUnusedVariablesWarningsOk returns a tuple with the IgnoreUnusedVariablesWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreUnusedVariablesWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreUnusedVariablesWarnings == nil {
		return nil, false
	}
	return o.IgnoreUnusedVariablesWarnings, true
}

// HasIgnoreUnusedVariablesWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreUnusedVariablesWarnings() bool {
	if o != nil && o.IgnoreUnusedVariablesWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreUnusedVariablesWarnings gets a reference to the given bool and assigns it to the IgnoreUnusedVariablesWarnings field.
func (o *CompilerOptions) SetIgnoreUnusedVariablesWarnings(v bool) {
	o.IgnoreUnusedVariablesWarnings = &v
}

// GetIgnoreUnusedFieldsWarnings returns the IgnoreUnusedFieldsWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreUnusedFieldsWarnings() bool {
	if o == nil || o.IgnoreUnusedFieldsWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUnusedFieldsWarnings
}

// GetIgnoreUnusedFieldsWarningsOk returns a tuple with the IgnoreUnusedFieldsWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreUnusedFieldsWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreUnusedFieldsWarnings == nil {
		return nil, false
	}
	return o.IgnoreUnusedFieldsWarnings, true
}

// HasIgnoreUnusedFieldsWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreUnusedFieldsWarnings() bool {
	if o != nil && o.IgnoreUnusedFieldsWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreUnusedFieldsWarnings gets a reference to the given bool and assigns it to the IgnoreUnusedFieldsWarnings field.
func (o *CompilerOptions) SetIgnoreUnusedFieldsWarnings(v bool) {
	o.IgnoreUnusedFieldsWarnings = &v
}

// GetIgnoreUnusedPrivateFunctionsWarnings returns the IgnoreUnusedPrivateFunctionsWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreUnusedPrivateFunctionsWarnings() bool {
	if o == nil || o.IgnoreUnusedPrivateFunctionsWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUnusedPrivateFunctionsWarnings
}

// GetIgnoreUnusedPrivateFunctionsWarningsOk returns a tuple with the IgnoreUnusedPrivateFunctionsWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreUnusedPrivateFunctionsWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreUnusedPrivateFunctionsWarnings == nil {
		return nil, false
	}
	return o.IgnoreUnusedPrivateFunctionsWarnings, true
}

// HasIgnoreUnusedPrivateFunctionsWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreUnusedPrivateFunctionsWarnings() bool {
	if o != nil && o.IgnoreUnusedPrivateFunctionsWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreUnusedPrivateFunctionsWarnings gets a reference to the given bool and assigns it to the IgnoreUnusedPrivateFunctionsWarnings field.
func (o *CompilerOptions) SetIgnoreUnusedPrivateFunctionsWarnings(v bool) {
	o.IgnoreUnusedPrivateFunctionsWarnings = &v
}

// GetIgnoreReadonlyCheckWarnings returns the IgnoreReadonlyCheckWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreReadonlyCheckWarnings() bool {
	if o == nil || o.IgnoreReadonlyCheckWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreReadonlyCheckWarnings
}

// GetIgnoreReadonlyCheckWarningsOk returns a tuple with the IgnoreReadonlyCheckWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreReadonlyCheckWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreReadonlyCheckWarnings == nil {
		return nil, false
	}
	return o.IgnoreReadonlyCheckWarnings, true
}

// HasIgnoreReadonlyCheckWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreReadonlyCheckWarnings() bool {
	if o != nil && o.IgnoreReadonlyCheckWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreReadonlyCheckWarnings gets a reference to the given bool and assigns it to the IgnoreReadonlyCheckWarnings field.
func (o *CompilerOptions) SetIgnoreReadonlyCheckWarnings(v bool) {
	o.IgnoreReadonlyCheckWarnings = &v
}

// GetIgnoreExternalCallCheckWarnings returns the IgnoreExternalCallCheckWarnings field value if set, zero value otherwise.
func (o *CompilerOptions) GetIgnoreExternalCallCheckWarnings() bool {
	if o == nil || o.IgnoreExternalCallCheckWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreExternalCallCheckWarnings
}

// GetIgnoreExternalCallCheckWarningsOk returns a tuple with the IgnoreExternalCallCheckWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilerOptions) GetIgnoreExternalCallCheckWarningsOk() (*bool, bool) {
	if o == nil || o.IgnoreExternalCallCheckWarnings == nil {
		return nil, false
	}
	return o.IgnoreExternalCallCheckWarnings, true
}

// HasIgnoreExternalCallCheckWarnings returns a boolean if a field has been set.
func (o *CompilerOptions) HasIgnoreExternalCallCheckWarnings() bool {
	if o != nil && o.IgnoreExternalCallCheckWarnings != nil {
		return true
	}

	return false
}

// SetIgnoreExternalCallCheckWarnings gets a reference to the given bool and assigns it to the IgnoreExternalCallCheckWarnings field.
func (o *CompilerOptions) SetIgnoreExternalCallCheckWarnings(v bool) {
	o.IgnoreExternalCallCheckWarnings = &v
}

func (o CompilerOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IgnoreUnusedConstantsWarnings != nil {
		toSerialize["ignoreUnusedConstantsWarnings"] = o.IgnoreUnusedConstantsWarnings
	}
	if o.IgnoreUnusedVariablesWarnings != nil {
		toSerialize["ignoreUnusedVariablesWarnings"] = o.IgnoreUnusedVariablesWarnings
	}
	if o.IgnoreUnusedFieldsWarnings != nil {
		toSerialize["ignoreUnusedFieldsWarnings"] = o.IgnoreUnusedFieldsWarnings
	}
	if o.IgnoreUnusedPrivateFunctionsWarnings != nil {
		toSerialize["ignoreUnusedPrivateFunctionsWarnings"] = o.IgnoreUnusedPrivateFunctionsWarnings
	}
	if o.IgnoreReadonlyCheckWarnings != nil {
		toSerialize["ignoreReadonlyCheckWarnings"] = o.IgnoreReadonlyCheckWarnings
	}
	if o.IgnoreExternalCallCheckWarnings != nil {
		toSerialize["ignoreExternalCallCheckWarnings"] = o.IgnoreExternalCallCheckWarnings
	}
	return json.Marshal(toSerialize)
}

type NullableCompilerOptions struct {
	value *CompilerOptions
	isSet bool
}

func (v NullableCompilerOptions) Get() *CompilerOptions {
	return v.value
}

func (v *NullableCompilerOptions) Set(val *CompilerOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCompilerOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCompilerOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompilerOptions(val *CompilerOptions) *NullableCompilerOptions {
	return &NullableCompilerOptions{value: val, isSet: true}
}

func (v NullableCompilerOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompilerOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


