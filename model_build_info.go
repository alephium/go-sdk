/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// BuildInfo struct for BuildInfo
type BuildInfo struct {
	ReleaseVersion string `json:"releaseVersion"`
	Commit string `json:"commit"`
}

// NewBuildInfo instantiates a new BuildInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildInfo(releaseVersion string, commit string) *BuildInfo {
	this := BuildInfo{}
	this.ReleaseVersion = releaseVersion
	this.Commit = commit
	return &this
}

// NewBuildInfoWithDefaults instantiates a new BuildInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildInfoWithDefaults() *BuildInfo {
	this := BuildInfo{}
	return &this
}

// GetReleaseVersion returns the ReleaseVersion field value
func (o *BuildInfo) GetReleaseVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseVersion
}

// GetReleaseVersionOk returns a tuple with the ReleaseVersion field value
// and a boolean to check if the value has been set.
func (o *BuildInfo) GetReleaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseVersion, true
}

// SetReleaseVersion sets field value
func (o *BuildInfo) SetReleaseVersion(v string) {
	o.ReleaseVersion = v
}

// GetCommit returns the Commit field value
func (o *BuildInfo) GetCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *BuildInfo) GetCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *BuildInfo) SetCommit(v string) {
	o.Commit = v
}

func (o BuildInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["releaseVersion"] = o.ReleaseVersion
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	return json.Marshal(toSerialize)
}

type NullableBuildInfo struct {
	value *BuildInfo
	isSet bool
}

func (v NullableBuildInfo) Get() *BuildInfo {
	return v.value
}

func (v *NullableBuildInfo) Set(val *BuildInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildInfo(val *BuildInfo) *NullableBuildInfo {
	return &NullableBuildInfo{value: val, isSet: true}
}

func (v NullableBuildInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


