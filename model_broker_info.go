/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// BrokerInfo struct for BrokerInfo
type BrokerInfo struct {
	CliqueId string `json:"cliqueId"`
	BrokerId int32 `json:"brokerId"`
	BrokerNum int32 `json:"brokerNum"`
	Address BrokerInfoAddress `json:"address"`
}

// NewBrokerInfo instantiates a new BrokerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerInfo(cliqueId string, brokerId int32, brokerNum int32, address BrokerInfoAddress) *BrokerInfo {
	this := BrokerInfo{}
	this.CliqueId = cliqueId
	this.BrokerId = brokerId
	this.BrokerNum = brokerNum
	this.Address = address
	return &this
}

// NewBrokerInfoWithDefaults instantiates a new BrokerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerInfoWithDefaults() *BrokerInfo {
	this := BrokerInfo{}
	return &this
}

// GetCliqueId returns the CliqueId field value
func (o *BrokerInfo) GetCliqueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CliqueId
}

// GetCliqueIdOk returns a tuple with the CliqueId field value
// and a boolean to check if the value has been set.
func (o *BrokerInfo) GetCliqueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CliqueId, true
}

// SetCliqueId sets field value
func (o *BrokerInfo) SetCliqueId(v string) {
	o.CliqueId = v
}

// GetBrokerId returns the BrokerId field value
func (o *BrokerInfo) GetBrokerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BrokerId
}

// GetBrokerIdOk returns a tuple with the BrokerId field value
// and a boolean to check if the value has been set.
func (o *BrokerInfo) GetBrokerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerId, true
}

// SetBrokerId sets field value
func (o *BrokerInfo) SetBrokerId(v int32) {
	o.BrokerId = v
}

// GetBrokerNum returns the BrokerNum field value
func (o *BrokerInfo) GetBrokerNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BrokerNum
}

// GetBrokerNumOk returns a tuple with the BrokerNum field value
// and a boolean to check if the value has been set.
func (o *BrokerInfo) GetBrokerNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerNum, true
}

// SetBrokerNum sets field value
func (o *BrokerInfo) SetBrokerNum(v int32) {
	o.BrokerNum = v
}

// GetAddress returns the Address field value
func (o *BrokerInfo) GetAddress() BrokerInfoAddress {
	if o == nil {
		var ret BrokerInfoAddress
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BrokerInfo) GetAddressOk() (*BrokerInfoAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BrokerInfo) SetAddress(v BrokerInfoAddress) {
	o.Address = v
}

func (o BrokerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cliqueId"] = o.CliqueId
	}
	if true {
		toSerialize["brokerId"] = o.BrokerId
	}
	if true {
		toSerialize["brokerNum"] = o.BrokerNum
	}
	if true {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableBrokerInfo struct {
	value *BrokerInfo
	isSet bool
}

func (v NullableBrokerInfo) Get() *BrokerInfo {
	return v.value
}

func (v *NullableBrokerInfo) Set(val *BrokerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerInfo(val *BrokerInfo) *NullableBrokerInfo {
	return &NullableBrokerInfo{value: val, isSet: true}
}

func (v NullableBrokerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


