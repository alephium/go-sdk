/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the ValByteVec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValByteVec{}

// ValByteVec struct for ValByteVec
type ValByteVec struct {
	Value string `json:"value"`
	Type string `json:"type"`
}

// NewValByteVec instantiates a new ValByteVec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValByteVec(value string, type_ string) *ValByteVec {
	this := ValByteVec{}
	this.Value = value
	this.Type = type_
	return &this
}

// NewValByteVecWithDefaults instantiates a new ValByteVec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValByteVecWithDefaults() *ValByteVec {
	this := ValByteVec{}
	return &this
}

// GetValue returns the Value field value
func (o *ValByteVec) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValByteVec) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValByteVec) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value
func (o *ValByteVec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ValByteVec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ValByteVec) SetType(v string) {
	o.Type = v
}

func (o ValByteVec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValByteVec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableValByteVec struct {
	value *ValByteVec
	isSet bool
}

func (v NullableValByteVec) Get() *ValByteVec {
	return v.value
}

func (v *NullableValByteVec) Set(val *ValByteVec) {
	v.value = val
	v.isSet = true
}

func (v NullableValByteVec) IsSet() bool {
	return v.isSet
}

func (v *NullableValByteVec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValByteVec(val *ValByteVec) *NullableValByteVec {
	return &NullableValByteVec{value: val, isSet: true}
}

func (v NullableValByteVec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValByteVec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


