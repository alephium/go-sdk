/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.6.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// CompileProjectResult struct for CompileProjectResult
type CompileProjectResult struct {
	Contracts []CompileContractResult `json:"contracts"`
	Scripts []CompileScriptResult `json:"scripts"`
}

// NewCompileProjectResult instantiates a new CompileProjectResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompileProjectResult(contracts []CompileContractResult, scripts []CompileScriptResult) *CompileProjectResult {
	this := CompileProjectResult{}
	this.Contracts = contracts
	this.Scripts = scripts
	return &this
}

// NewCompileProjectResultWithDefaults instantiates a new CompileProjectResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompileProjectResultWithDefaults() *CompileProjectResult {
	this := CompileProjectResult{}
	return &this
}

// GetContracts returns the Contracts field value
func (o *CompileProjectResult) GetContracts() []CompileContractResult {
	if o == nil {
		var ret []CompileContractResult
		return ret
	}

	return o.Contracts
}

// GetContractsOk returns a tuple with the Contracts field value
// and a boolean to check if the value has been set.
func (o *CompileProjectResult) GetContractsOk() ([]CompileContractResult, bool) {
	if o == nil {
    return nil, false
	}
	return o.Contracts, true
}

// SetContracts sets field value
func (o *CompileProjectResult) SetContracts(v []CompileContractResult) {
	o.Contracts = v
}

// GetScripts returns the Scripts field value
func (o *CompileProjectResult) GetScripts() []CompileScriptResult {
	if o == nil {
		var ret []CompileScriptResult
		return ret
	}

	return o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value
// and a boolean to check if the value has been set.
func (o *CompileProjectResult) GetScriptsOk() ([]CompileScriptResult, bool) {
	if o == nil {
    return nil, false
	}
	return o.Scripts, true
}

// SetScripts sets field value
func (o *CompileProjectResult) SetScripts(v []CompileScriptResult) {
	o.Scripts = v
}

func (o CompileProjectResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contracts"] = o.Contracts
	}
	if true {
		toSerialize["scripts"] = o.Scripts
	}
	return json.Marshal(toSerialize)
}

type NullableCompileProjectResult struct {
	value *CompileProjectResult
	isSet bool
}

func (v NullableCompileProjectResult) Get() *CompileProjectResult {
	return v.value
}

func (v *NullableCompileProjectResult) Set(val *CompileProjectResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompileProjectResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompileProjectResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompileProjectResult(val *CompileProjectResult) *NullableCompileProjectResult {
	return &NullableCompileProjectResult{value: val, isSet: true}
}

func (v NullableCompileProjectResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompileProjectResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


