/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// HashesAtHeight struct for HashesAtHeight
type HashesAtHeight struct {
	Headers []string `json:"headers"`
}

// NewHashesAtHeight instantiates a new HashesAtHeight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashesAtHeight(headers []string) *HashesAtHeight {
	this := HashesAtHeight{}
	this.Headers = headers
	return &this
}

// NewHashesAtHeightWithDefaults instantiates a new HashesAtHeight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashesAtHeightWithDefaults() *HashesAtHeight {
	this := HashesAtHeight{}
	return &this
}

// GetHeaders returns the Headers field value
func (o *HashesAtHeight) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *HashesAtHeight) GetHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *HashesAtHeight) SetHeaders(v []string) {
	o.Headers = v
}

func (o HashesAtHeight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["headers"] = o.Headers
	}
	return json.Marshal(toSerialize)
}

type NullableHashesAtHeight struct {
	value *HashesAtHeight
	isSet bool
}

func (v NullableHashesAtHeight) Get() *HashesAtHeight {
	return v.value
}

func (v *NullableHashesAtHeight) Set(val *HashesAtHeight) {
	v.value = val
	v.isSet = true
}

func (v NullableHashesAtHeight) IsSet() bool {
	return v.isSet
}

func (v *NullableHashesAtHeight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashesAtHeight(val *HashesAtHeight) *NullableHashesAtHeight {
	return &NullableHashesAtHeight{value: val, isSet: true}
}

func (v NullableHashesAtHeight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashesAtHeight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


