/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// BlocksAndEventsPerTimeStampRange struct for BlocksAndEventsPerTimeStampRange
type BlocksAndEventsPerTimeStampRange struct {
	BlocksAndEvents [][]BlockAndEvents `json:"blocksAndEvents"`
}

// NewBlocksAndEventsPerTimeStampRange instantiates a new BlocksAndEventsPerTimeStampRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlocksAndEventsPerTimeStampRange(blocksAndEvents [][]BlockAndEvents) *BlocksAndEventsPerTimeStampRange {
	this := BlocksAndEventsPerTimeStampRange{}
	this.BlocksAndEvents = blocksAndEvents
	return &this
}

// NewBlocksAndEventsPerTimeStampRangeWithDefaults instantiates a new BlocksAndEventsPerTimeStampRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlocksAndEventsPerTimeStampRangeWithDefaults() *BlocksAndEventsPerTimeStampRange {
	this := BlocksAndEventsPerTimeStampRange{}
	return &this
}

// GetBlocksAndEvents returns the BlocksAndEvents field value
func (o *BlocksAndEventsPerTimeStampRange) GetBlocksAndEvents() [][]BlockAndEvents {
	if o == nil {
		var ret [][]BlockAndEvents
		return ret
	}

	return o.BlocksAndEvents
}

// GetBlocksAndEventsOk returns a tuple with the BlocksAndEvents field value
// and a boolean to check if the value has been set.
func (o *BlocksAndEventsPerTimeStampRange) GetBlocksAndEventsOk() ([][]BlockAndEvents, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlocksAndEvents, true
}

// SetBlocksAndEvents sets field value
func (o *BlocksAndEventsPerTimeStampRange) SetBlocksAndEvents(v [][]BlockAndEvents) {
	o.BlocksAndEvents = v
}

func (o BlocksAndEventsPerTimeStampRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blocksAndEvents"] = o.BlocksAndEvents
	}
	return json.Marshal(toSerialize)
}

type NullableBlocksAndEventsPerTimeStampRange struct {
	value *BlocksAndEventsPerTimeStampRange
	isSet bool
}

func (v NullableBlocksAndEventsPerTimeStampRange) Get() *BlocksAndEventsPerTimeStampRange {
	return v.value
}

func (v *NullableBlocksAndEventsPerTimeStampRange) Set(val *BlocksAndEventsPerTimeStampRange) {
	v.value = val
	v.isSet = true
}

func (v NullableBlocksAndEventsPerTimeStampRange) IsSet() bool {
	return v.isSet
}

func (v *NullableBlocksAndEventsPerTimeStampRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlocksAndEventsPerTimeStampRange(val *BlocksAndEventsPerTimeStampRange) *NullableBlocksAndEventsPerTimeStampRange {
	return &NullableBlocksAndEventsPerTimeStampRange{value: val, isSet: true}
}

func (v NullableBlocksAndEventsPerTimeStampRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlocksAndEventsPerTimeStampRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


