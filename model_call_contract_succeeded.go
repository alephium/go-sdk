/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.5.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// checks if the CallContractSucceeded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallContractSucceeded{}

// CallContractSucceeded struct for CallContractSucceeded
type CallContractSucceeded struct {
	Returns []Val `json:"returns"`
	GasUsed int32 `json:"gasUsed"`
	Contracts []ContractState `json:"contracts"`
	TxInputs []string `json:"txInputs"`
	TxOutputs []Output `json:"txOutputs"`
	Events []ContractEventByTxId `json:"events"`
	Type string `json:"type"`
}

// NewCallContractSucceeded instantiates a new CallContractSucceeded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallContractSucceeded(returns []Val, gasUsed int32, contracts []ContractState, txInputs []string, txOutputs []Output, events []ContractEventByTxId, type_ string) *CallContractSucceeded {
	this := CallContractSucceeded{}
	this.Returns = returns
	this.GasUsed = gasUsed
	this.Contracts = contracts
	this.TxInputs = txInputs
	this.TxOutputs = txOutputs
	this.Events = events
	this.Type = type_
	return &this
}

// NewCallContractSucceededWithDefaults instantiates a new CallContractSucceeded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallContractSucceededWithDefaults() *CallContractSucceeded {
	this := CallContractSucceeded{}
	return &this
}

// GetReturns returns the Returns field value
func (o *CallContractSucceeded) GetReturns() []Val {
	if o == nil {
		var ret []Val
		return ret
	}

	return o.Returns
}

// GetReturnsOk returns a tuple with the Returns field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetReturnsOk() ([]Val, bool) {
	if o == nil {
		return nil, false
	}
	return o.Returns, true
}

// SetReturns sets field value
func (o *CallContractSucceeded) SetReturns(v []Val) {
	o.Returns = v
}

// GetGasUsed returns the GasUsed field value
func (o *CallContractSucceeded) GetGasUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetGasUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasUsed, true
}

// SetGasUsed sets field value
func (o *CallContractSucceeded) SetGasUsed(v int32) {
	o.GasUsed = v
}

// GetContracts returns the Contracts field value
func (o *CallContractSucceeded) GetContracts() []ContractState {
	if o == nil {
		var ret []ContractState
		return ret
	}

	return o.Contracts
}

// GetContractsOk returns a tuple with the Contracts field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetContractsOk() ([]ContractState, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contracts, true
}

// SetContracts sets field value
func (o *CallContractSucceeded) SetContracts(v []ContractState) {
	o.Contracts = v
}

// GetTxInputs returns the TxInputs field value
func (o *CallContractSucceeded) GetTxInputs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TxInputs
}

// GetTxInputsOk returns a tuple with the TxInputs field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetTxInputsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxInputs, true
}

// SetTxInputs sets field value
func (o *CallContractSucceeded) SetTxInputs(v []string) {
	o.TxInputs = v
}

// GetTxOutputs returns the TxOutputs field value
func (o *CallContractSucceeded) GetTxOutputs() []Output {
	if o == nil {
		var ret []Output
		return ret
	}

	return o.TxOutputs
}

// GetTxOutputsOk returns a tuple with the TxOutputs field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetTxOutputsOk() ([]Output, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxOutputs, true
}

// SetTxOutputs sets field value
func (o *CallContractSucceeded) SetTxOutputs(v []Output) {
	o.TxOutputs = v
}

// GetEvents returns the Events field value
func (o *CallContractSucceeded) GetEvents() []ContractEventByTxId {
	if o == nil {
		var ret []ContractEventByTxId
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetEventsOk() ([]ContractEventByTxId, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CallContractSucceeded) SetEvents(v []ContractEventByTxId) {
	o.Events = v
}

// GetType returns the Type field value
func (o *CallContractSucceeded) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CallContractSucceeded) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CallContractSucceeded) SetType(v string) {
	o.Type = v
}

func (o CallContractSucceeded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallContractSucceeded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["returns"] = o.Returns
	toSerialize["gasUsed"] = o.GasUsed
	toSerialize["contracts"] = o.Contracts
	toSerialize["txInputs"] = o.TxInputs
	toSerialize["txOutputs"] = o.TxOutputs
	toSerialize["events"] = o.Events
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCallContractSucceeded struct {
	value *CallContractSucceeded
	isSet bool
}

func (v NullableCallContractSucceeded) Get() *CallContractSucceeded {
	return v.value
}

func (v *NullableCallContractSucceeded) Set(val *CallContractSucceeded) {
	v.value = val
	v.isSet = true
}

func (v NullableCallContractSucceeded) IsSet() bool {
	return v.isSet
}

func (v *NullableCallContractSucceeded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallContractSucceeded(val *CallContractSucceeded) *NullableCallContractSucceeded {
	return &NullableCallContractSucceeded{value: val, isSet: true}
}

func (v NullableCallContractSucceeded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallContractSucceeded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


