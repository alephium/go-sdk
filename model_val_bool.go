/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// ValBool struct for ValBool
type ValBool struct {
	Value bool `json:"value"`
	Type string `json:"type"`
}

// NewValBool instantiates a new ValBool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValBool(value bool, type_ string) *ValBool {
	this := ValBool{}
	this.Value = value
	this.Type = type_
	return &this
}

// NewValBoolWithDefaults instantiates a new ValBool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValBoolWithDefaults() *ValBool {
	this := ValBool{}
	return &this
}

// GetValue returns the Value field value
func (o *ValBool) GetValue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValBool) GetValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValBool) SetValue(v bool) {
	o.Value = v
}

// GetType returns the Type field value
func (o *ValBool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ValBool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ValBool) SetType(v string) {
	o.Type = v
}

func (o ValBool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableValBool struct {
	value *ValBool
	isSet bool
}

func (v NullableValBool) Get() *ValBool {
	return v.value
}

func (v *NullableValBool) Set(val *ValBool) {
	v.value = val
	v.isSet = true
}

func (v NullableValBool) IsSet() bool {
	return v.isSet
}

func (v *NullableValBool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValBool(val *ValBool) *NullableValBool {
	return &NullableValBool{value: val, isSet: true}
}

func (v NullableValBool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValBool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


