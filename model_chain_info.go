/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// ChainInfo struct for ChainInfo
type ChainInfo struct {
	CurrentHeight int32 `json:"currentHeight"`
}

// NewChainInfo instantiates a new ChainInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainInfo(currentHeight int32) *ChainInfo {
	this := ChainInfo{}
	this.CurrentHeight = currentHeight
	return &this
}

// NewChainInfoWithDefaults instantiates a new ChainInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainInfoWithDefaults() *ChainInfo {
	this := ChainInfo{}
	return &this
}

// GetCurrentHeight returns the CurrentHeight field value
func (o *ChainInfo) GetCurrentHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentHeight
}

// GetCurrentHeightOk returns a tuple with the CurrentHeight field value
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetCurrentHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentHeight, true
}

// SetCurrentHeight sets field value
func (o *ChainInfo) SetCurrentHeight(v int32) {
	o.CurrentHeight = v
}

func (o ChainInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currentHeight"] = o.CurrentHeight
	}
	return json.Marshal(toSerialize)
}

type NullableChainInfo struct {
	value *ChainInfo
	isSet bool
}

func (v NullableChainInfo) Get() *ChainInfo {
	return v.value
}

func (v *NullableChainInfo) Set(val *ChainInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableChainInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableChainInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainInfo(val *ChainInfo) *NullableChainInfo {
	return &NullableChainInfo{value: val, isSet: true}
}

func (v NullableChainInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


