/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// CompileContractResult struct for CompileContractResult
type CompileContractResult struct {
	Bytecode string `json:"bytecode"`
	CodeHash string `json:"codeHash"`
	Fields FieldsSig `json:"fields"`
	Functions []FunctionSig `json:"functions"`
	Events []EventSig `json:"events"`
}

// NewCompileContractResult instantiates a new CompileContractResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompileContractResult(bytecode string, codeHash string, fields FieldsSig, functions []FunctionSig, events []EventSig) *CompileContractResult {
	this := CompileContractResult{}
	this.Bytecode = bytecode
	this.CodeHash = codeHash
	this.Fields = fields
	this.Functions = functions
	this.Events = events
	return &this
}

// NewCompileContractResultWithDefaults instantiates a new CompileContractResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompileContractResultWithDefaults() *CompileContractResult {
	this := CompileContractResult{}
	return &this
}

// GetBytecode returns the Bytecode field value
func (o *CompileContractResult) GetBytecode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bytecode
}

// GetBytecodeOk returns a tuple with the Bytecode field value
// and a boolean to check if the value has been set.
func (o *CompileContractResult) GetBytecodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytecode, true
}

// SetBytecode sets field value
func (o *CompileContractResult) SetBytecode(v string) {
	o.Bytecode = v
}

// GetCodeHash returns the CodeHash field value
func (o *CompileContractResult) GetCodeHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CodeHash
}

// GetCodeHashOk returns a tuple with the CodeHash field value
// and a boolean to check if the value has been set.
func (o *CompileContractResult) GetCodeHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CodeHash, true
}

// SetCodeHash sets field value
func (o *CompileContractResult) SetCodeHash(v string) {
	o.CodeHash = v
}

// GetFields returns the Fields field value
func (o *CompileContractResult) GetFields() FieldsSig {
	if o == nil {
		var ret FieldsSig
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *CompileContractResult) GetFieldsOk() (*FieldsSig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *CompileContractResult) SetFields(v FieldsSig) {
	o.Fields = v
}

// GetFunctions returns the Functions field value
func (o *CompileContractResult) GetFunctions() []FunctionSig {
	if o == nil {
		var ret []FunctionSig
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *CompileContractResult) GetFunctionsOk() ([]FunctionSig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *CompileContractResult) SetFunctions(v []FunctionSig) {
	o.Functions = v
}

// GetEvents returns the Events field value
func (o *CompileContractResult) GetEvents() []EventSig {
	if o == nil {
		var ret []EventSig
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CompileContractResult) GetEventsOk() ([]EventSig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CompileContractResult) SetEvents(v []EventSig) {
	o.Events = v
}

func (o CompileContractResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bytecode"] = o.Bytecode
	}
	if true {
		toSerialize["codeHash"] = o.CodeHash
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if true {
		toSerialize["functions"] = o.Functions
	}
	if true {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableCompileContractResult struct {
	value *CompileContractResult
	isSet bool
}

func (v NullableCompileContractResult) Get() *CompileContractResult {
	return v.value
}

func (v *NullableCompileContractResult) Set(val *CompileContractResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompileContractResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompileContractResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompileContractResult(val *CompileContractResult) *NullableCompileContractResult {
	return &NullableCompileContractResult{value: val, isSet: true}
}

func (v NullableCompileContractResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompileContractResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


