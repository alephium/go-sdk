/*
Alephium API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alephium

import (
	"encoding/json"
)

// FetchResponse struct for FetchResponse
type FetchResponse struct {
	Blocks [][]BlockEntry `json:"blocks"`
}

// NewFetchResponse instantiates a new FetchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchResponse(blocks [][]BlockEntry) *FetchResponse {
	this := FetchResponse{}
	this.Blocks = blocks
	return &this
}

// NewFetchResponseWithDefaults instantiates a new FetchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchResponseWithDefaults() *FetchResponse {
	this := FetchResponse{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *FetchResponse) GetBlocks() [][]BlockEntry {
	if o == nil {
		var ret [][]BlockEntry
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *FetchResponse) GetBlocksOk() ([][]BlockEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *FetchResponse) SetBlocks(v [][]BlockEntry) {
	o.Blocks = v
}

func (o FetchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blocks"] = o.Blocks
	}
	return json.Marshal(toSerialize)
}

type NullableFetchResponse struct {
	value *FetchResponse
	isSet bool
}

func (v NullableFetchResponse) Get() *FetchResponse {
	return v.value
}

func (v *NullableFetchResponse) Set(val *FetchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchResponse(val *FetchResponse) *NullableFetchResponse {
	return &NullableFetchResponse{value: val, isSet: true}
}

func (v NullableFetchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


